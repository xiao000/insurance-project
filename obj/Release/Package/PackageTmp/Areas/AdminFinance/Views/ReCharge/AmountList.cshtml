@model Bx_Core.ReCharge

@{
    ViewBag.Title = "流水信息";
    Layout = null;
}
<style type="text/css">
    .modal-dialog {
        width: 1000px;
    }
	
</style>
<!--ins_fullcontent start-->
		<div class="ins_rightmian ins_fullcontent" id="ins_rightmain">
			<div class="ins_rightcontent">
				<ul class="userdeposit">
					<li class="userNamer">账号：@ViewBag.userName</li>
					<li>余额：<span id="Adeposit">@ViewBag.amount</span><span>元</span></li>
				</ul>
				<div class="content_main">
			        <table id="afamountlist">
					</table>
				</div>
			</div>
		</div>
		<!--ins_fullcontent end-->

		<script type="text/javascript">
	    $(function () {
			// 分页请求
			var page_number = '1';
			
			//得到查询的参数
		    queryParams = function(params) {
		        var temp = { //这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
		            limit: params.limit,
			        pageNumber:(params.offset / params.limit) + 1,
			        search: params.search,
			        sortname: params.sort,
			        order: params.order,
			        policyid: @ViewBag.policyId
		        };
		        return temp;
		    };
			
			$('#afamountlist').bootstrapTable({
				url: '/AdminFinance/ReCharge/AmountList?policyid='+'policyid',
				data_id:'0',
				method: 'post', //请求方式（*）
				//toolbar: '#afamountlist_Toolbar', //工具按钮用哪个容器
				striped: true, //是否显示行间隔色
				cache: false, //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
				pagination: true, //是否显示分页（*）
				sortable: false, //是否启用排序
				sortOrder: "desc", //排序方式
				sidePagination: "server", //分页方式：client客户端分页，server服务端分页（*）
				pageNumber: 1, //初始化加载第一页，默认第一页
				pageSize: 10, //每页的记录行数（*）
				queryParams: queryParams,//传递参数（*）
				//queryParamsType: "limit",
				sortable: true, //是否启用排序
				//sortOrder: "ID asc",
				/*pageList: [1,2,3], */ //可供选择的每页的行数（*）
				search: false, //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
				//locale: "zh-CN",
				strictSearch: true,
				showColumns: false, //是否显示所有的列
				//showRefresh: true,                  //是否显示刷新按钮
				minimumCountColumns: 2, //最少允许的列数
				uniqueId: "PolicyId", //每一行的唯一标识，一般为主键列
				showToggle: false, //是否显示详细视图和列表视图的切换按钮
				cardView: false, //是否显示详细视图
				detailView: true, //是否显示父子表
				//height: $th, //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
				showExport: false,
				idField: "PolicyId",
				//exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel'],
				clickToSelect: false,
				//contentType: "application/x-www-form-urlencoded; charset=UTF-8",///application/json
				contentType: "application/x-www-form-urlencoded; charset=UTF-8",
				searchAlign: "left",
				buttonsAlign: "right",
				toolbarAlign: "right",
				columns: [
					{
						field: "Id",
						title: "序号",
						align: "center",
						valign: "middle",
						sortable: "true",
						formatter: function (value, row, index) {
							var pageSize=$('#afamountlist').bootstrapTable('getOptions').pageSize;//通过表的#id 可以得到每页多少条
							var pageNumber=$('#afamountlist').bootstrapTable('getOptions').pageNumber;//通过表的#id 可以得到当前第几页
							return pageSize * (pageNumber - 1) + index + 1;    //返回每条的序号： 每页条数 * （当前页 - 1 ）+ 序号
						}
					},
					{
						field: "CreateTime",
						title: "流水时间",
						align: "center",
						valign: "middle",
						sortable: "true",
						formatter: function(value){
							var str=value.replace("/Date(","");
							var txt=str.replace(")/","");
							return new Date(parseInt(txt)).toLocaleString();
						}
					},
					{
						field: "ReChargeAmount",
						title: "金额/元",
						align: "center",
						valign: "middle",
						sortable: "true"
					},
					{
						field: "ReChargeType",
						title: "流水类型",
						align: "center",
						valign: "middle",
						sortable: "true"
					}
				],
				onPageChange: function(size, number) {

				},
				formatNoMatches: function() {
					return '没有相关数据哦！';
				},

				onLoadSuccess: function() {

				}
			});
	        
	        $(window).resize(function() {
	            $('#afamountlist').bootstrapTable('resetView');
	        });
	        

    	});
    	
		Date.prototype.toLocaleString = function() {
			return this.getFullYear() + "-" + (this.getMonth() + 1) + "-" + this.getDate() + " " + this.getHours() + ":" + this.getMinutes() + ":" + this.getSeconds();
		};
	    function getIdSelections() {
	        return $.map($('#afamountlist').bootstrapTable('getSelections'), function(row) {
	            return row.PolicyId
	        });
	    }
	    
	    function responseHandler(res) {
	        $.each(res.rows, function(i, row) {
	            row.state = $.inArray(row.id, selections) !== -1;
	        });
	        return res;
	    }

	    function detailFormatter(index, row) {
	        var html = [];
	        $.each(row, function(key, value) {
	            html.push('<p><b>' + key + ':</b> ' + value + '</p>');
	        });
	        return html.join('');
	    }


		</script>

